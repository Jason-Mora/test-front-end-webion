import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { Alert, AlertColor, AlertTitle, Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, InputAdornment, Skeleton, Snackbar, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField, Typography } from "@mui/material";
import { Delete, Edit, Search } from "@mui/icons-material";
import { useEffect, useState } from "react";
import { deleteUser, editUser, getUsers } from '@/utils/userService';
import moment from "moment";
import { DateField, LocalizationProvider } from "@mui/x-date-pickers";
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import dayjs, { Dayjs } from "dayjs";

export default function Home() {
  const [loading, setLoading] = useState<boolean>(true)
  //TABELLA
  const [rows, setRows] = useState<IPersona[]>([])
  //ALERT
  const [alertType, setAlertType] = useState<AlertColor | undefined>(undefined)
  const [alertTitle, setAlertTitle] = useState<string | undefined>(undefined)
  const [alertContent, setAlertContent] = useState<string | undefined>(undefined)
  //DIALOG ELIMINA
  const [deleteDialogState, setDeleteDialogState] = useState<boolean>(false)
  const [deletePersona, setDeletePersona] = useState<IPersona | undefined>(undefined)
  //DIALOG MODIFICA
  const [modifyDialogState, setModifyDialogState] = useState<boolean>(false)
  const [modifyPersona, setModifyPersona] = useState<IPersona | undefined>(undefined)
  //RICERCA
  const [filter, setFilter] = useState<string | undefined>('')

  function load(filter: string | undefined) {
    setLoading(true)
    getUsers(filter, manageError)
    .then(response => {
      setRows(response.results)
      setLoading(false)
    })
  }

  useEffect(() => {
    load(filter)
  }, [filter])


  //ELIMINA DIALOG
  function openDeleteDialog(persona: IPersona) {
    setDeletePersona(persona)
    setDeleteDialogState(true)
  }
  function closeDeleteDialog() {
    setDeleteDialogState(false)
    setDeletePersona(undefined)
  }
  function eliminaPersona() {
    deleteUser(deletePersona?.id, manageError)
    .then(_ => {
      load(filter)
    })
    .then(_ => {      
      setAlertType('success')
      setAlertTitle('Eliminazione avvenuta con successo')
      setAlertContent(`La persona ${deletePersona?.firstName} ${deletePersona?.lastName} è stata eliminata con successo`)
      closeDeleteDialog()
    })
  }

  //MODIFICA DIALOG
  function openModifyDialog(persona: IPersona) {
    setModifyPersona(persona)
    setModifyDialogState(true)
  }
  function closeModifyDialog() {
    setModifyDialogState(false)
    setModifyPersona(undefined)
  }
  function modificaPersona() {
    console.log(modifyPersona)
    editUser(modifyPersona?.id, modifyPersona, manageError)
    .then(_ => {
      load(filter)
    })
    .then(_ => {
      setAlertType('success')
      setAlertTitle('Modifica avvenuta con successo')
      setAlertContent(`La persona ${modifyPersona?.firstName} ${modifyPersona?.lastName} è stata modificata con successo`)
      closeModifyDialog()
    })
  }
  function modificaNomePersona(value: string) {
    if(modifyPersona === undefined) {
      return
    }

    let newModifyPersona:IPersona = {...modifyPersona}
    newModifyPersona.firstName = value
    setModifyPersona(newModifyPersona)
  }
  function modificaCognomePersona(value: string) {
    if(modifyPersona === undefined) {
      return
    }
    
    let newModifyPersona:IPersona = {...modifyPersona}
    newModifyPersona.lastName = value
    setModifyPersona(newModifyPersona)

  }
  function modificaDataNascitaPersona(value: Dayjs  | null) {
    if(modifyPersona === undefined) {
      return
    }

    if(value === null || value === undefined) {
      return
    }

    let newModifyPersona:IPersona = {...modifyPersona}
    newModifyPersona.birthDate = value?.format("YYYY-MM-DD")
    setModifyPersona(newModifyPersona)

  }

  //GESTIONE ERRORI
  function manageError(error: IError) {
    setAlertType('error')
    setAlertTitle('Codice errore: ' + error.statusCode)
    setAlertContent(error.message)
  }
  
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        {/* font per material UI */}
        <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" />
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" />

      </Head>
      <div className={styles.page} >
        {/* MESSAGGI ALERT */}
        <Snackbar open={alertType !== undefined}
          anchorOrigin={{vertical: 'top', horizontal: 'center'}}
          autoHideDuration={5000}
          onClose={_ => {
            setAlertType(undefined)
            setAlertTitle(undefined)
            setAlertContent(undefined)
          }}
        >
          <Alert severity={alertType} variant="filled">
            <AlertTitle>{alertTitle}</AlertTitle>
            {alertContent}
          </Alert>
        </Snackbar>
        {/* DIALOG ELIMINA PERSONA */}
        <Dialog open={deleteDialogState} maxWidth='xs' fullWidth>
          <DialogTitle>Elimina persona</DialogTitle>
          <DialogContent>Sei sicuro di voler eliminare la persona <b>{deletePersona?.firstName} {deletePersona?.lastName}</b>?</DialogContent>
          <DialogActions>
            <Button variant="text" onClick={closeDeleteDialog}>Annulla</Button>
            <Button variant="contained" color='error' onClick={_ => eliminaPersona()}>Elimina</Button>
          </DialogActions>
        </Dialog>
        {/* DIALOG MODIFICA PERSONA */}
        <Dialog open={modifyDialogState} maxWidth='xs' fullWidth>
          <DialogTitle>Modifica persona</DialogTitle>
          <DialogContent>
            <Typography className={styles.dialog_label}>Nome</Typography>
            <TextField className={styles.dialog_field} size="small" fullWidth value={modifyPersona?.firstName} onChange={e => modificaNomePersona(e.target.value)}/>
            <Typography className={styles.dialog_label}>Cognome</Typography>
            <TextField className={styles.dialog_field} size="small" fullWidth value={modifyPersona?.lastName} onChange={e => modificaCognomePersona(e.target.value)}/>
            <Typography className={styles.dialog_label}>Data di nascita</Typography>
            <LocalizationProvider dateAdapter={AdapterDayjs}>
              <DateField
                label="Controlled field"
                defaultValue={dayjs(modifyPersona?.birthDate)}
                format="DD/MM/YYYY"
                onChange={(val) => modificaDataNascitaPersona(val)}
              />
            </LocalizationProvider>
          </DialogContent>
          <DialogActions>
            <Button variant="text" onClick={closeModifyDialog}>Annulla</Button>
            <Button variant="contained" color='info' onClick={_ => modificaPersona()}>Modifica</Button>
          </DialogActions>
        </Dialog>
        <Typography>Persone</Typography>
        <TextField placeholder="Cerca" fullWidth slotProps={{
            input: {
              startAdornment: (
                <InputAdornment position="start">
                  <Search />
                </InputAdornment>
              ),
            },
          }}
          value={filter}
          onChange={e => setFilter(e.target.value)}
          sx={{
            '& .MuiOutlinedInput-root': {
              borderRadius: '8px'
            }
          }}
          size='small'
        />
        
        <TableContainer className={styles.table_container}>
          <Table>
            <TableHead>
              <TableRow className={styles.table_header}>
                <TableCell align="left" width={300}>Id</TableCell>
                <TableCell align="left" width={300}>Nome</TableCell>
                <TableCell align="left" width={300}>Cognome</TableCell>
                <TableCell align="left">Data di nascita</TableCell>
                <TableCell align="left" width={80}></TableCell>
              </TableRow>
            </TableHead>
            <TableBody className={styles.table_body}>
              {loading &&
                <>
                  <TableRow className={styles.skeleton_row}>
                    <TableCell><Skeleton variant="rectangular"/><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><hr/><Skeleton variant="rectangular"/><Skeleton variant="rectangular"/></TableCell>
                  </TableRow>
                  <TableRow className={styles.skeleton_row_desktop}>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                  </TableRow>
                  <TableRow className={styles.skeleton_row_desktop}>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                  </TableRow>
                  <TableRow className={styles.skeleton_row_desktop}>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                  </TableRow>
                  <TableRow className={styles.skeleton_row_desktop}>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                    <TableCell><Skeleton variant="rectangular"/></TableCell>
                  </TableRow>
                </> 
              }
              {!loading && rows?.length > 0 ?
                rows.map((row) => (
                  <TableRow
                    key={row.id}
                    className={styles.table_row}
                  >
                    <TableCell align="left"><Typography>ID</Typography>{row.id}</TableCell>
                    <TableCell align="left" className={styles.no_mobile}>{row.firstName}</TableCell>
                    <TableCell align="left" className={styles.no_mobile}>{row.lastName}</TableCell>
                    <TableCell align="left"><Typography>DATA DI NASCITA</Typography>{moment(row.birthDate, 'YYYY-MM-DD').format('DD/MM/YYYY')}</TableCell>
                    <TableCell align="left" className={styles.mobile}><Typography>NOME</Typography>{row.firstName}</TableCell>
                    <TableCell align="left" className={styles.mobile}><Typography>COGNOME</Typography>{row.lastName}</TableCell>
                    <TableCell align="left" className={styles.table_actions}>
                      <hr/>
                      <Stack direction={"row"}>
                        <IconButton
                          onClick={_ => openModifyDialog(row)}
                        >
                          <Edit />
                        </IconButton>
                        <IconButton
                          onClick={_ => openDeleteDialog(row)}
                        >
                          <Delete />
                        </IconButton>
                      </Stack>
                    </TableCell>
                  </TableRow>
                ))
                :
                !loading && <>
                  <TableRow
                    className={`${styles.table_row} ${styles.table_row_empty}`}>
                    <TableCell colSpan={5} height={300} align="center">Nessuna persona presente</TableCell>
                  </TableRow>
                </>
              }
            </TableBody>
          </Table>
        </TableContainer>
      </div>
    </>
  );
}
